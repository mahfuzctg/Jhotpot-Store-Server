// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id @default(uuid()) // Unique user ID (UUID).
  email              String     @unique // Unique email for the user.
  password           String // User's hashed password.
  role               UserRole // Role of the user (e.g., ADMIN, VENDOR, CUSTOMER).
  status             UserStatus @default(ACTIVE) // Current status of the user (e.g., ACTIVE, BLOCKED).
  createdAt          DateTime   @default(now()) // Timestamp of when the user was created.
  updatedAt          DateTime   @updatedAt // Timestamp of when the user was last updated.
  admin              Admin? // Optional relation if the user is an admin.
  vendor             Vendor? // Optional relation if the user is a vendor.
  customer           Customer? // Optional relation if the user is a customer.

  @@map("users") // Maps this model to the "users" table.
}

model Admin {
  id            String   @id @default(uuid()) // Unique admin ID (UUID).
  name          String // Name of the admin.
  email         String   @unique // Unique email for the admin.
  profilePhoto  String? // Optional profile photo URL for the admin.
  isDeleted     Boolean  @default(false) // Soft delete flag for the admin.
  createdAt     DateTime @default(now()) // Timestamp of when the admin record was created.
  updatedAt     DateTime @updatedAt // Timestamp of when the admin record was last updated.

  user User @relation(fields: [email], references: [email]) // Links the admin to a user.

  @@map("admins") // Maps this model to the "admins" table.
}

model Vendor {
  id            String   @id @default(uuid()) // Unique vendor ID (UUID).
  name          String // Name of the vendor or business.
  email         String   @unique // Unique email for the vendor.
  shopName      String? // Optional shop name for the vendor.
  logo          String? // Optional logo URL for the vendor.
  description   String? // Optional description of the vendor's business.
  isDeleted     Boolean  @default(false) // Soft delete flag for the vendor.
  createdAt     DateTime @default(now()) // Timestamp of when the vendor record was created.
  updatedAt     DateTime @updatedAt // Timestamp of when the vendor record was last updated.
  products      Product[] // List of products offered by the vendor.
  orders        Order[] // List of orders associated with the vendor.
  followers     Follow[] // List of customers following the vendor.

  user User @relation(fields: [email], references: [email]) // Links the vendor to a user.

  @@map("vendors") // Maps this model to the "vendors" table.
}


model Customer {
  id                String   @id @default(uuid()) // Unique customer ID (UUID).
  name              String // Name of the customer.
  email             String   @unique // Unique email for the customer.
  profilePhoto      String? // Optional profile photo URL for the customer.
  isDeleted         Boolean  @default(false) // Soft delete flag for the customer.
  createdAt         DateTime @default(now()) // Timestamp of when the customer record was created.
  updatedAt         DateTime @updatedAt // Timestamp of when the customer record was last updated.
  orders            Order[] // List of orders placed by the customer.
  reviews           Review[] // List of reviews written by the customer.
  follows           Follow[] // List of vendors followed by the customer.
  recentProductView RecentProductView[] // Tracks products recently viewed by the customer.

  user User @relation(fields: [email], references: [email]) // Links the customer to a user.

  @@map("customers") // Maps this model to the "customers" table.
}

model Product {
  id             String   @id @default(uuid()) // Unique product ID (UUID).
  name           String // Name of the product.
  image          String // URL of the product image.
  price          Float // Price of the product.
  inventory      Int // Inventory count for the product.
  description    String // Description of the product.
  flashSale      Boolean?  @default(false) // Indicates if the product is on flash sale.
  discount       Float?    @default(0) // Discount applied to the product (if any).
  isDeleted      Boolean   @default(false) // Soft delete flag for the product.
  categoryId     String // Foreign key linking the product to a category.
  vendorId       String // Foreign key linking the product to a vendor.
  orderDetails   OrderDetail[] // List of order details associated with the product.
  reviews        Review[] // List of reviews for the product.
  recentProductView RecentProductView[] // Tracks customers who recently viewed the product.

  category       Category  @relation(fields: [categoryId], references: [id]) // Links the product to a category.
  vendor         Vendor    @relation(fields: [vendorId], references: [id]) // Links the product to a vendor.

  @@map("products") // Maps this model to the "products" table.
}

model Category {
  id       String   @id @default(uuid()) // Unique category ID (UUID).
  name     String    @unique // Unique name for the category.
  image    String // URL of the category image.
  products Product[] // List of products under this category.

  @@map("categories") // Maps this model to the "categories" table.
}

model Order {
  id             String   @id @default(uuid()) // Unique order ID (UUID).
  customerId     String // Foreign key linking the order to a customer.
  vendorId       String // Foreign key linking the order to a vendor.
  totalPrice     Float // Total price of the order.
  paymentStatus  PaymentStatus // Status of the payment (PAID/UNPAID).
  transactionId  String   @unique // Unique identifier for the transaction.
  orderDetails   OrderDetail[] // List of order details associated with this order.

  customer       Customer  @relation(fields: [customerId], references: [id]) // Links the order to a customer.
  vendor         Vendor    @relation(fields: [vendorId], references: [id]) // Links the order to a vendor.

  @@map("orders") // Maps this model to the "orders" table.
}

model OrderDetail {
  id             String   @id @default(uuid()) // Unique order detail ID (UUID).
  orderId        String // Foreign key linking the detail to an order.
  productId      String // Foreign key linking the detail to a product.
  quantity       Int // Quantity of the product ordered.
  pricePerUnit   Float // Price per unit of the product.

  order          Order    @relation(fields: [orderId], references: [id]) // Links the detail to an order.
  product        Product  @relation(fields: [productId], references: [id]) // Links the detail to a product.

  @@map("order_details") // Maps this model to the "order_details" table.
}

model Review {
  id             String   @id @default(uuid()) // Unique review ID (UUID).
  productId      String // Foreign key linking the review to a product.
  customerId     String // Foreign key linking the review to a customer.
  rating         Int // Rating given by the customer.
  comment        String? // Optional comment provided by the customer.

  product        Product   @relation(fields: [productId], references: [id]) // Links the review to a product.
  customer       Customer  @relation(fields: [customerId], references: [id]) // Links the review to a customer.

  @@map("reviews") // Maps this model to the "reviews" table.
}

model Follow {
  id             String   @id @default(uuid()) // Unique follow ID (UUID).
  customerId     String // Foreign key linking the follow to a customer.
  vendorId       String // Foreign key linking the follow to a vendor.

  customer       Customer  @relation(fields: [customerId], references: [id]) // Links the follow to a customer.
  vendor         Vendor    @relation(fields: [vendorId], references: [id]) // Links the follow to a vendor.

  @@map("followers") // Maps this model to the "followers" table.
}

model RecentProductView {
  id             String   @id @default(uuid()) // Unique view ID (UUID).
  customerId     String // Foreign key linking the view to a customer.
  productId      String // Foreign key linking the view to a product.
  viewedAt       DateTime  @default(now()) // Timestamp when the product was viewed.

  customer       Customer  @relation(fields: [customerId], references: [id]) // Links the view to a customer.
  product        Product   @relation(fields: [productId], references: [id]) // Links the view to a product.

  @@map("recent_product_views") // Maps this model to the "recent_product_views" table.
}

enum UserRole {
  SUPER_ADMIN // Role for super admin users.
  ADMIN // Role for admin users.
  VENDOR // Role for vendors.
  CUSTOMER // Role for regular customers.
}

enum UserStatus {
  ACTIVE // Status indicating the user is active.
  BLOCKED // Status indicating the user is blocked.
  DELETED // Status indicating the user is deleted.
}

enum PaymentStatus {
  PAID // Indicates the payment is complete.
  UNPAID // Indicates the payment is pending.
}
